// <auto-generated />
using System;
using JoBoard.AuthService.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace JoBoard.AuthService.Infrastructure.Data.Migrations
{
    [DbContext(typeof(AuthDbContext))]
    partial class AuthDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.25")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("JoBoard.AuthService.Domain.Aggregates.User.ExternalAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("ExternalUserId")
                        .HasColumnType("text");

                    b.Property<int>("Provider")
                        .HasColumnType("integer");

                    b.HasKey("Id", "ExternalUserId", "Provider");

                    b.HasIndex("ExternalUserId", "Provider");

                    b.ToTable("ExternalAccounts", (string)null);
                });
            
            modelBuilder.Entity("JoBoard.AuthService.Domain.Aggregates.User.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("RegisteredAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("JoBoard.AuthService.Domain.Aggregates.User.ExternalAccount", b =>
                {
                    b.HasOne("JoBoard.AuthService.Domain.Aggregates.User.User", null)
                        .WithMany("ExternalAccounts")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
            
            modelBuilder.Entity("JoBoard.AuthService.Domain.Aggregates.User.User", b =>
                {
                    b.OwnsOne("JoBoard.AuthService.Domain.Aggregates.User.FullName", "FullName", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("FirstName");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("LastName");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("JoBoard.AuthService.Domain.Aggregates.User.Password", "Password", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Hash")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("PasswordHash");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("JoBoard.AuthService.Domain.Aggregates.User.ConfirmationToken", "AccountDeactivationConfirmToken", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("Expiration")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("AccountDeactivationConfirmTokenExpiration");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("AccountDeactivationConfirmToken");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("JoBoard.AuthService.Domain.Aggregates.User.ConfirmationToken", "ChangeEmailConfirmToken", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("Expiration")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("ChangeEmailConfirmTokenExpiration");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("ChangeEmailConfirmToken");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("JoBoard.AuthService.Domain.Aggregates.User.Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("Email");

                            b1.HasKey("UserId");

                            b1.HasIndex("Value")
                                .IsUnique()
                                .HasDatabaseName("IX_Users_Email");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("JoBoard.AuthService.Domain.Aggregates.User.Email", "NewEmail", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("NewEmail");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("JoBoard.AuthService.Domain.Aggregates.User.ConfirmationToken", "RegisterConfirmToken", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("Expiration")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("RegisterConfirmTokenExpiration");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("RegisterConfirmToken");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("JoBoard.AuthService.Domain.Aggregates.User.ConfirmationToken", "ResetPasswordConfirmToken", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("Expiration")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("ResetPasswordConfirmTokenExpiration");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("ResetPasswordConfirmToken");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("AccountDeactivationConfirmToken");

                    b.Navigation("ChangeEmailConfirmToken");

                    b.Navigation("Email")
                        .IsRequired();

                    b.Navigation("FullName")
                        .IsRequired();

                    b.Navigation("NewEmail");

                    b.Navigation("Password");

                    b.Navigation("RegisterConfirmToken");

                    b.Navigation("ResetPasswordConfirmToken");
                });

            modelBuilder.Entity("JoBoard.AuthService.Domain.Aggregates.User.User", b =>
                {
                    b.Navigation("ExternalAccounts");
                });
#pragma warning restore 612, 618
        }
    }
}
